{"version":3,"sources":["LevelsCalculator.js","App.js","reportWebVitals.js","index.js"],"names":["LevelsCalculator","useState","fromLevel","setFromLevel","pointsNext","setPointsNext","toLevel","setToLevel","reqPoints","setReqPoints","className","FormControl","FormLabel","htmlFor","Input","id","value","onChange","e","target","RadioGroup","aria-label","name","FormControlLabel","control","Radio","label","Button","variant","onClick","parseInt","pointsSoFar","levels","totalPriorFriendshipPoints","pointsTarget","toString","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ioBAOaA,EAAmB,WAC9B,MAAkCC,mBAAS,KAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,mBAAS,KAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,mBAAS,MAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAkCN,qBAAlC,mBAAOO,EAAP,KAAkBC,EAAlB,KAaA,OACE,sBAAKC,UAAU,YAAf,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,QAAQ,aAAnB,yBACA,cAACC,EAAA,EAAD,CACEC,GAAG,aACHC,MAAOd,EACPe,SAAU,SAACC,GAAD,OAAOf,EAAae,EAAEC,OAAOH,aAG3C,eAACL,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,QAAQ,cAAnB,mCACA,cAACC,EAAA,EAAD,CACEC,GAAG,cACHC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOb,EAAca,EAAEC,OAAOH,aAG5C,eAACL,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,wBACA,eAACQ,EAAA,EAAD,CACEC,aAAW,YACXC,KAAK,WACLN,MAAOV,EACPW,SAAU,SAACC,GAAD,OAAOX,EAAWW,EAAEC,OAAOH,QAJvC,UAKE,cAACO,EAAA,EAAD,CAAkBP,MAAM,IAAIQ,QAAS,cAACC,EAAA,EAAD,IAAWC,MAAM,YACtD,cAACH,EAAA,EAAD,CAAkBP,MAAM,KAAKQ,QAAS,cAACC,EAAA,EAAD,IAAWC,MAAM,aACvD,cAACH,EAAA,EAAD,CAAkBP,MAAM,KAAKQ,QAAS,cAACC,EAAA,EAAD,IAAWC,MAAM,mBAG3D,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAzCd,WAChB,GAAIC,SAAS5B,IAAc4B,SAASxB,GAClCG,EAAa,SADf,CAIA,IAAMsB,EAAcC,EAAOC,2BAA2BH,SAAS5B,GAAa,GAAK4B,SAAS1B,GACpF8B,EAAeF,EAAOC,2BAA2BH,SAASxB,IAEhEG,GADeyB,EAAeH,GACVI,cAiClB,uBACC3B,GAAa,kDAAqBA,SClC1B4B,MAjBf,WACE,OACE,sBAAK1B,UAAU,MAAf,UACE,8DACA,8DACA,qJAAuH,mBAAG2B,KAAK,mDAAR,uBAAvH,8GACA,8GACA,oEACA,cAAC,EAAD,IACA,sBAAK3B,UAAU,SAAf,UACE,8DAAgC,mBAAG2B,KAAK,gCAAR,2BAChC,kEAAoC,mBAAGA,KAAK,+EAAR,iCCH7BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2fe76c05.chunk.js","sourcesContent":["import { useState } from 'react';\n\nimport { Button, FormControl, FormControlLabel, FormLabel, Input, RadioGroup, Radio } from '@material-ui/core';\n\nimport levels from './levels.json';\nimport './LevelsCalculator.scss';\n\nexport const LevelsCalculator = () => {\n  const [fromLevel, setFromLevel] = useState(\"0\");\n  const [pointsNext, setPointsNext] = useState(\"0\");\n  const [toLevel, setToLevel] = useState(\"15\");\n  const [reqPoints, setReqPoints] = useState();\n\n  const calculate = () => {\n    if (parseInt(fromLevel) >= parseInt(toLevel)) {\n      setReqPoints('0');\n      return;\n    }\n    const pointsSoFar = levels.totalPriorFriendshipPoints[parseInt(fromLevel) + 1] - parseInt(pointsNext);\n    const pointsTarget = levels.totalPriorFriendshipPoints[parseInt(toLevel)];\n    const result = pointsTarget - pointsSoFar;\n    setReqPoints(result.toString());\n  }\n  \n  return (\n    <div className=\"container\">\n      <FormControl>\n        <FormLabel htmlFor=\"from-level\">From Level:</FormLabel>\n        <Input\n          id=\"from-level\"\n          value={fromLevel}\n          onChange={(e) => setFromLevel(e.target.value)}\n        />\n      </FormControl>\n      <FormControl>\n        <FormLabel htmlFor=\"points-next\">Points to Next Level:</FormLabel>\n        <Input\n          id=\"points-next\"\n          value={pointsNext}\n          onChange={(e) => setPointsNext(e.target.value)}\n        />\n      </FormControl>\n      <FormControl>\n        <FormLabel>To Level:</FormLabel>\n        <RadioGroup\n          aria-label=\"To Level:\"\n          name=\"to-level\"\n          value={toLevel}\n          onChange={(e) => setToLevel(e.target.value)}>\n          <FormControlLabel value=\"7\" control={<Radio />} label=\"Level 7\" />\n          <FormControlLabel value=\"10\" control={<Radio />} label=\"Level 10\" />\n          <FormControlLabel value=\"15\" control={<Radio />} label=\"Level 15\" />\n        </RadioGroup>\n      </FormControl>\n      <Button variant=\"contained\" onClick={calculate}>Level Up!</Button>\n      {reqPoints && <p>Required Points: {reqPoints}</p>}\n    </div>\n  )\n};\n","import './App.css';\n\nimport { LevelsCalculator } from './LevelsCalculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Animal Crossing: Pocket Camp</h2>\n      <h1>Friendship Levels Calculator</h1>\n      <p>Have you ever found yourself stuck on a Happy Homeroom class because you can't craft a furniture? Look it up on the <a href=\"https://animalcrossingpocketcamp.fandom.com/wiki\">ACPC Wiki</a> and it turns out you have to reach Level 15 Friendship with a villager and start their Special Request.</p>\n      <p>Fortunately you have plenty of snacks to give them, but how many do you need?</p>\n      <p>Let us help you calculate it below!</p>\n      <LevelsCalculator />\n      <div className=\"footer\">\n        <p>Developed by Desy Kristianti <a href=\"https://twitter.com/dessskris\">@dessskris</a></p>\n        <p>Friendship Levels Points Source: <a href=\"https://animalcrossingpocketcamp.fandom.com/wiki/Villagers#Friendship_Levels\">ACPC Wiki</a></p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}